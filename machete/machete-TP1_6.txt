TP1_6

TP1.c =>


#define TEST (TP1_6)


#if (TEST == TP1_6)	/* Making portable tickHook & LEDs & Push Buttons */

???

#endif


/* The DEBUG* functions are sAPI debug print functions.
   Code that uses the DEBUG* functions will have their I/O routed to
   the sAPI DEBUG UART. */
DEBUG_PRINT_ENABLE;

#define TICKRATE_1MS	(1)				/* 1000 ticks per second */
#define TICKRATE_10MS	(10)			/* 100 ticks per second */
#define TICKRATE_100MS	(100)			/* 10 ticks per second */
#define TICKRATE_MS		(TICKRATE_1MS)	/* ¿? ticks per second */

#define BUTTON_STATUS_10MS	(10)
#define BUTTON_STATUS_100MS	(50)
#define BUTTON_STATUS_500MS	(100)
#define BUTTON_STATUS_MS	(BUTTON_STATUS_10MS / TICKRATE_MS)

volatile bool LED_Time_Flag = false;

volatile bool BUTTON_Status_Flag = false;
volatile bool BUTTON_Time_Flag = false;



/* FUNCION que se ejecuta cada vez que ocurre un Tick. */
void myTickHook( void *ptr ) {
	LED_Time_Flag = true;
	BUTTON_Time_Flag = true;

    if (!gpioRead( TEC1 ))
		BUTTON_Status_Flag = true;
	else
		BUTTON_Status_Flag = false;

}


/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void) {

	/* ------------- INICIALIZACIONES ------------- */
	uint32_t BUTTON_Status_Counter = 0;
	uint32_t idx = LED3;

	/* Inicializar la placa */
	boardConfig();

	/* UART for debug messages. */
	debugPrintConfigUart( UART_USB, 115200 );
	debugPrintString( "DEBUG c/sAPI\r\n" );

	/* Inicializar el conteo de Ticks con resolucion de 1ms (se ejecuta
       periodicamente una interrupcion cada TICKRATE_MS que incrementa un contador de
       Ticks obteniendose una base de tiempos). */
	tickConfig( TICKRATE_MS );

	/* Se agrega ademas un "tick hook" nombrado myTickHook. El tick hook es
       simplemente una funcion que se ejecutara peri�odicamente con cada
       interrupcion de Tick, este nombre se refiere a una funcion "enganchada"
       a una interrupcion.
       El segundo parametro es el parametro que recibe la funcion myTickHook
       al ejecutarse. En este ejemplo se utiliza para pasarle el led a titilar.
	*/
	tickCallbackSet( myTickHook, (void*)NULL );

	gpioToggle(LED3);

	/* ------------- REPETIR POR SIEMPRE ------------- */
	while(1) {
		__WFI();

		if (BUTTON_Time_Flag == true) {
			BUTTON_Time_Flag = false;

			if (BUTTON_Status_Flag == true) {
				BUTTON_Status_Flag = false;

				if (BUTTON_Status_Counter == 0) {
					BUTTON_Status_Counter = BUTTON_STATUS_MS;

					gpioToggle(idx);

					((idx > LEDR) ? idx-- : (idx = LED3));

					gpioToggle(idx);
					debugPrintString( "LED Toggle\n" );
				}
				else
					BUTTON_Status_Counter--;
			}

		}
	}

	/* NO DEBE LLEGAR NUNCA AQUI, debido a que a este programa no es llamado
       por ningun S.O. */
	return 0 ;
}
